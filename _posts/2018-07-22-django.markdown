---
layout: post
title:  "django"
date:   2018-07-22 10:45:11 +0800
categories: django
comments: true
tags: django 
---


## python virtual env
```bash
python3.6 -m venv test
source /bin/activate
```
## install pip tools
```bash
pip install django==1.11.9
```

## list pip installed package
```bash
pip list
```

## Generate output suitable for a requirements file.
```bash
$ pip freeze > requirements.txt
```
## install from it in another environment.
```bash
pip install -r requirements.txt
```



## Django create project
```bash
django-admin startproject yourprojectname
```

## Django create App
```bash
python manage.py startapp yourappname
```
 

 
## Views
### Create hello_django.html in ./templates folder
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    {{data}}
</body>
</html>
```

### in yourappname/views.py 
```python
from django.shortcuts import render

# Create your views here.
def hello_view(request):
    return render(request, 'hello_django.html', {
        'data': "Hello Django ",
    })
```

## URLconf
### in urls.py
```python
from django.conf.urls import url
from django.contrib import admin
from musics.views import hello_view

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^hello/', hello_view),
]
```

## Models
### in models.py
```python
from django.db import models


# Create your models here.
class Music(models.Model):
    song = models.TextField(default="song")
    singer = models.TextField(default="AKB48")
    last_modify_date = models.DateTimeField(auto_now=True)
    created = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = "music"
```

## Migrations
```bash
python3.6 manage.py makemigrations
python3.3 manage.py migrate
```

## Admin Site
### in settings.py
```python
INSTALLED_APPS = [
    'django.contrib.admin',
    ......
]
```

### urls.py
```python
urlpatterns = [
    url(r'^admin/',admin.site.urls), 
    .... , 
]
```

### createsuperuser
```bash
python manage.py createsuperuser
```

### ./yourappname/admin.py
```python
from django.contrib import admin

# Register your models here.
from django.contrib import admin
from musics.models import Music
admin.site.register(Music)
```

## done
http://127.0.0.1:8000/admin

[reference](https://github.com/twtrubiks/django-rest-framework-tutorial)


## run server at anywhere to port 8000
```bash
./manage.py runserver 0.0.0.0:8000
```



## To kill it with -9 you will
## have to list all running manage.py processes, for instance:
```bash
ps aux | grep -i manage
kill -9 pid
```


## Common Error

### AllowHost Error
```bash
DisallowedHost at /
Invalid HTTP_HOST header: '192.168.0.102:8000'. You may need to add '192.168.0.102' to ALLOWED_HOSTS.
```
[reference](https://docs.djangoproject.com/en/1.8/ref/settings/#allowed-hosts)
### solve configure the settings.py files
```bash
ALLOWED_HOST = ['*']
# or 
ALLOWED_HOST = ['xxx.xxx.xxx.xxx'] # your ip addresss
```


### Django error,TemplateDoesNotExist at /hello

```bash
# = [os.path.join(BASE_DIR,"templates")]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,"templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

```


### django mysql solved problem


if  python 2.x version
If pip install mysqlclient produces an error and you use Ubuntu, try:
```bash
sudo apt-get install -y python-dev libmysqlclient-dev 
sudo pip install mysqlclient
```

if your python version is 3.5, do a :
```bash
apt-get install python-dev
pip  install mysqlclient

or 

apt-get install python3.5-dev
pip3.5 install mysqlclient

```
if dont work try below

Note this is not tested for python 3.x
```bash
pip install wheel
pip install pymysql

```

[ref](https://stackoverflow.com/questions/454854/no-module-named-mysqldb)
### in settings.py
```bash
import pymysql
pymysql.install_as_MySQLdb();
```

### INITIAL DJANGO MIGRATIONS FOR EXISTING DB SCHEMA.
Step1: Empty the django_migrations table: 
```bash
delete from django_migrations;
```
Step2: Remove all the files in migrations folders in each and every app of your project.
```bash
rm -rf <app>/migrations/
```
Step3: Reset the migrations for the "built-in" apps:
```bash
python manage.py migrate --fake
```
Step4: Create initial migrations for each and every app:
```bash
python manage.py makemigrations <app>.
```
Step5: Final step is to create fake initial migrations:
```bash
python manage.py migrate --fake-initial
```

### Create model from existiong mysql database 

果開發到一半才將資料庫轉成 MySQL，或是在 Django 中想要使用 MySQL 中的資料表，就必須在 Model 中寫好資料格式。但是已經建好表，要一個一個寫進 Model 起不是很麻煩？好在 Django 有個貼心功能，使用 inspectdb 就能把資料格式都匯入 Model囉！ 顯示轉換後的 Model 內容.
```bash
python manage.py inspectdb > <yourapp>/models.py
python manage.py makemigrations <yourapp>
python manage.py migrate

```


if 如果啓動項目時報錯： 
```bash
django.db.utils.ProgrammingError: (1146, “Table ‘vd.django_content_type’ doesn’t exist”)
```
把原表格中django_migrations表刪除資料之後，重新執行命令 
```bash
Python manage.py makemigrations <yourapp>
Python manage.py migrate 
```
然後再啓動項目就可以啦


## python static file
in settings.py

```bash
... ...
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
```

```bash
python manage.py collectstatic
```